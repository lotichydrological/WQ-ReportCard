# WBID (305b segment), not the smaller AUID (305b reach)
segmentWBID <- gsub("_.*","",segmentName)
# retrieve all data for the segment
Data = watershedData[watershedData$MonitoringLocationIdentifier %in% stationIDs,]
# filter dataset to desired date range
Data <- Data[date(Data$ActivityStartDate) >= as.Date(StartDate, "%m-%d-%Y") & date(Data$ActivityStartDate) <= as.Date(EndDate, "%m-%d-%Y"),]
#retrieve associated datasets for standards calculation on metals and ammonia
temperatureData = retrieveNumericalData(Data, c("Temperature", "Temperature, water"), "deg C", "")
pHData = retrieveNumericalData(Data, "pH", "Std. Units", "")
hardnessData = retrieveNumericalData(Data, c("Hardness, Ca, Mg as CaCO3","Hardness, Ca, Mg", "Total hardness -- SDWA NPDWR", "Hardness"), c("mg/l", "mg/l CaCO3"), "")
# retrieve characteristic names
characteristicNames <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "CharacteristicNames"]
# retrieve valueType
valueType <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "valueType"]
# retrieve evaluation type
eval_type <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "standardType"]
# retrieve units
Units <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "Units"]
# retrieve relevent data
dataset <- retrieveNumericalData(Data, characteristicNames, Units, valueType)
# remove zeroes
# dataset <- dataset[dataset$ResultMeasureValue != 0.0,]
# retrieve standard
standard <- standardCalc(UseClass, Indicator, Category, segmentWBID, eval_type)
# build scatterplot
if(nrow(dataset) == 0){
sp <- ggplot(dataset) + geom_blank()
sp <- sp + ggtitle("No data available")
sp <- sp + theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
sp
}else{
sp <- ggplot(dataset, aes(x = ActivityStartDate, y = ResultMeasureValue))
if(nrow(dataset) > 25) {
sp <- sp + geom_smooth(se=FALSE)
sp <- sp + geom_dl(aes(label = "Trendline"), color = "blue",method = "top.bumptwice")
}
sp <- sp + geom_point(size = 2)
sp <- sp + geom_hline(yintercept = standard, linetype = "dashed",size = 1.5, color = "red")
sp <- sp + geom_text(aes(x = StartDate, y=standard, hjust = -0.25, vjust=1.5,label = "Standard", size = 12,color = "red", face = "bold"))
sp <- sp + ggtitle("Measured concentration \nthrough time")
sp <- sp + labs(x = "Date", y = Units)
sp <- sp + theme_bw() + theme(
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text = element_text(size = 12, face = "bold"),
panel.border = element_rect(color = "black", fill=NA, size=.8),
plot.title = element_text(size = 14, face = "bold"),
legend.position = "none"
)
sp
}
return(sp)
}
shinyApp(ui = ui, server = server)
buildScatterplot <- function(watershedData, UseClass, Indicator, Category, segmentName, StartDate, EndDate){
# call required parent data frames
monitoringStations <- get("monitoringStations", envir = parent.frame())
wqStandards <- get("wqStandards", envir = parent.frame())
# create list of station IDs to select data
stationIDs = unique(as.vector(monitoringStations$MonitoringLocationID[
tolower(monitoringStations$SegmentID) == tolower(segmentName)]))
#remove the reach designator from the segmentID so that the program will just grab the standards assigned to the
# WBID (305b segment), not the smaller AUID (305b reach)
segmentWBID <- gsub("_.*","",segmentName)
# retrieve all data for the segment
Data = watershedData[watershedData$MonitoringLocationIdentifier %in% stationIDs,]
# filter dataset to desired date range
Data <- Data[date(Data$ActivityStartDate) >= as.Date(StartDate, "%m-%d-%Y") & date(Data$ActivityStartDate) <= as.Date(EndDate, "%m-%d-%Y"),]
#retrieve associated datasets for standards calculation on metals and ammonia
temperatureData = retrieveNumericalData(Data, c("Temperature", "Temperature, water"), "deg C", "")
pHData = retrieveNumericalData(Data, "pH", "Std. Units", "")
hardnessData = retrieveNumericalData(Data, c("Hardness, Ca, Mg as CaCO3","Hardness, Ca, Mg", "Total hardness -- SDWA NPDWR", "Hardness"), c("mg/l", "mg/l CaCO3"), "")
# retrieve characteristic names
characteristicNames <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "CharacteristicNames"]
# retrieve valueType
valueType <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "valueType"]
# retrieve evaluation type
eval_type <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "standardType"]
# retrieve units
Units <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "Units"]
# retrieve relevent data
dataset <- retrieveNumericalData(Data, characteristicNames, Units, valueType)
# remove zeroes
# dataset <- dataset[dataset$ResultMeasureValue != 0.0,]
# retrieve standard
standard <- standardCalc(UseClass, Indicator, Category, segmentWBID, eval_type)
# build scatterplot
if(nrow(dataset) == 0){
sp <- ggplot(dataset) + geom_blank()
sp <- sp + ggtitle("No data available")
sp <- sp + theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
sp
}else{
sp <- ggplot(dataset, aes(x = ActivityStartDate, y = ResultMeasureValue))
if(nrow(dataset) > 25) {
sp <- sp + geom_smooth(se=FALSE)
sp <- sp + geom_dl(aes(label = "Trendline"), color = "blue",method = "maxar.points")
}
sp <- sp + geom_point(size = 2)
sp <- sp + geom_hline(yintercept = standard, linetype = "dashed",size = 1.5, color = "red")
sp <- sp + geom_text(aes(x = StartDate, y=standard, hjust = -0.25, vjust=1.5,label = "Standard", size = 12,color = "red", face = "bold"))
sp <- sp + ggtitle("Measured concentration \nthrough time")
sp <- sp + labs(x = "Date", y = Units)
sp <- sp + theme_bw() + theme(
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text = element_text(size = 12, face = "bold"),
panel.border = element_rect(color = "black", fill=NA, size=.8),
plot.title = element_text(size = 14, face = "bold"),
legend.position = "none"
)
sp
}
return(sp)
}
shinyApp(ui = ui, server = server)
buildScatterplot <- function(watershedData, UseClass, Indicator, Category, segmentName, StartDate, EndDate){
# call required parent data frames
monitoringStations <- get("monitoringStations", envir = parent.frame())
wqStandards <- get("wqStandards", envir = parent.frame())
# create list of station IDs to select data
stationIDs = unique(as.vector(monitoringStations$MonitoringLocationID[
tolower(monitoringStations$SegmentID) == tolower(segmentName)]))
#remove the reach designator from the segmentID so that the program will just grab the standards assigned to the
# WBID (305b segment), not the smaller AUID (305b reach)
segmentWBID <- gsub("_.*","",segmentName)
# retrieve all data for the segment
Data = watershedData[watershedData$MonitoringLocationIdentifier %in% stationIDs,]
# filter dataset to desired date range
Data <- Data[date(Data$ActivityStartDate) >= as.Date(StartDate, "%m-%d-%Y") & date(Data$ActivityStartDate) <= as.Date(EndDate, "%m-%d-%Y"),]
#retrieve associated datasets for standards calculation on metals and ammonia
temperatureData = retrieveNumericalData(Data, c("Temperature", "Temperature, water"), "deg C", "")
pHData = retrieveNumericalData(Data, "pH", "Std. Units", "")
hardnessData = retrieveNumericalData(Data, c("Hardness, Ca, Mg as CaCO3","Hardness, Ca, Mg", "Total hardness -- SDWA NPDWR", "Hardness"), c("mg/l", "mg/l CaCO3"), "")
# retrieve characteristic names
characteristicNames <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "CharacteristicNames"]
# retrieve valueType
valueType <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "valueType"]
# retrieve evaluation type
eval_type <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "standardType"]
# retrieve units
Units <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "Units"]
# retrieve relevent data
dataset <- retrieveNumericalData(Data, characteristicNames, Units, valueType)
# remove zeroes
# dataset <- dataset[dataset$ResultMeasureValue != 0.0,]
# retrieve standard
standard <- standardCalc(UseClass, Indicator, Category, segmentWBID, eval_type)
# build scatterplot
if(nrow(dataset) == 0){
sp <- ggplot(dataset) + geom_blank()
sp <- sp + ggtitle("No data available")
sp <- sp + theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
sp
}else{
sp <- ggplot(dataset, aes(x = ActivityStartDate, y = ResultMeasureValue))
if(nrow(dataset) > 25) {
sp <- sp + geom_smooth(se=FALSE)
sp <- sp + geom_dl(aes(label = "Trendline"), color = "blue",method = "maxvar.points")
}
sp <- sp + geom_point(size = 2)
sp <- sp + geom_hline(yintercept = standard, linetype = "dashed",size = 1.5, color = "red")
sp <- sp + geom_text(aes(x = StartDate, y=standard, hjust = -0.25, vjust=1.5,label = "Standard", size = 12,color = "red", face = "bold"))
sp <- sp + ggtitle("Measured concentration \nthrough time")
sp <- sp + labs(x = "Date", y = Units)
sp <- sp + theme_bw() + theme(
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text = element_text(size = 12, face = "bold"),
panel.border = element_rect(color = "black", fill=NA, size=.8),
plot.title = element_text(size = 14, face = "bold"),
legend.position = "none"
)
sp
}
return(sp)
}
shinyApp(ui = ui, server = server)
buildScatterplot <- function(watershedData, UseClass, Indicator, Category, segmentName, StartDate, EndDate){
# call required parent data frames
monitoringStations <- get("monitoringStations", envir = parent.frame())
wqStandards <- get("wqStandards", envir = parent.frame())
# create list of station IDs to select data
stationIDs = unique(as.vector(monitoringStations$MonitoringLocationID[
tolower(monitoringStations$SegmentID) == tolower(segmentName)]))
#remove the reach designator from the segmentID so that the program will just grab the standards assigned to the
# WBID (305b segment), not the smaller AUID (305b reach)
segmentWBID <- gsub("_.*","",segmentName)
# retrieve all data for the segment
Data = watershedData[watershedData$MonitoringLocationIdentifier %in% stationIDs,]
# filter dataset to desired date range
Data <- Data[date(Data$ActivityStartDate) >= as.Date(StartDate, "%m-%d-%Y") & date(Data$ActivityStartDate) <= as.Date(EndDate, "%m-%d-%Y"),]
#retrieve associated datasets for standards calculation on metals and ammonia
temperatureData = retrieveNumericalData(Data, c("Temperature", "Temperature, water"), "deg C", "")
pHData = retrieveNumericalData(Data, "pH", "Std. Units", "")
hardnessData = retrieveNumericalData(Data, c("Hardness, Ca, Mg as CaCO3","Hardness, Ca, Mg", "Total hardness -- SDWA NPDWR", "Hardness"), c("mg/l", "mg/l CaCO3"), "")
# retrieve characteristic names
characteristicNames <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "CharacteristicNames"]
# retrieve valueType
valueType <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "valueType"]
# retrieve evaluation type
eval_type <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "standardType"]
# retrieve units
Units <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "Units"]
# retrieve relevent data
dataset <- retrieveNumericalData(Data, characteristicNames, Units, valueType)
# remove zeroes
# dataset <- dataset[dataset$ResultMeasureValue != 0.0,]
# retrieve standard
standard <- standardCalc(UseClass, Indicator, Category, segmentWBID, eval_type)
# build scatterplot
if(nrow(dataset) == 0){
sp <- ggplot(dataset) + geom_blank()
sp <- sp + ggtitle("No data available")
sp <- sp + theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
sp
}else{
sp <- ggplot(dataset, aes(x = ActivityStartDate, y = ResultMeasureValue))
if(nrow(dataset) > 25) {
sp <- sp + geom_smooth(se=FALSE)
sp <- sp + geom_dl(aes(label = "Trendline"), color = "blue",method = "smart.grid")
}
sp <- sp + geom_point(size = 2)
sp <- sp + geom_hline(yintercept = standard, linetype = "dashed",size = 1.5, color = "red")
sp <- sp + geom_text(aes(x = StartDate, y=standard, hjust = -0.25, vjust=1.5,label = "Standard", size = 12,color = "red", face = "bold"))
sp <- sp + ggtitle("Measured concentration \nthrough time")
sp <- sp + labs(x = "Date", y = Units)
sp <- sp + theme_bw() + theme(
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text = element_text(size = 12, face = "bold"),
panel.border = element_rect(color = "black", fill=NA, size=.8),
plot.title = element_text(size = 14, face = "bold"),
legend.position = "none"
)
sp
}
return(sp)
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
buildScatterplot <- function(watershedData, UseClass, Indicator, Category, segmentName, StartDate, EndDate){
# call required parent data frames
monitoringStations <- get("monitoringStations", envir = parent.frame())
wqStandards <- get("wqStandards", envir = parent.frame())
# create list of station IDs to select data
stationIDs = unique(as.vector(monitoringStations$MonitoringLocationID[
tolower(monitoringStations$SegmentID) == tolower(segmentName)]))
#remove the reach designator from the segmentID so that the program will just grab the standards assigned to the
# WBID (305b segment), not the smaller AUID (305b reach)
segmentWBID <- gsub("_.*","",segmentName)
# retrieve all data for the segment
Data = watershedData[watershedData$MonitoringLocationIdentifier %in% stationIDs,]
# filter dataset to desired date range
Data <- Data[date(Data$ActivityStartDate) >= as.Date(StartDate, "%m-%d-%Y") & date(Data$ActivityStartDate) <= as.Date(EndDate, "%m-%d-%Y"),]
#retrieve associated datasets for standards calculation on metals and ammonia
temperatureData = retrieveNumericalData(Data, c("Temperature", "Temperature, water"), "deg C", "")
pHData = retrieveNumericalData(Data, "pH", "Std. Units", "")
hardnessData = retrieveNumericalData(Data, c("Hardness, Ca, Mg as CaCO3","Hardness, Ca, Mg", "Total hardness -- SDWA NPDWR", "Hardness"), c("mg/l", "mg/l CaCO3"), "")
# retrieve characteristic names
characteristicNames <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "CharacteristicNames"]
# retrieve valueType
valueType <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "valueType"]
# retrieve evaluation type
eval_type <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "standardType"]
# retrieve units
Units <- wqStandards[wqStandards$Indicator == Indicator & wqStandards$Category == Category & wqStandards$UseClass == UseClass, "Units"]
# retrieve relevent data
dataset <- retrieveNumericalData(Data, characteristicNames, Units, valueType)
# remove zeroes
# dataset <- dataset[dataset$ResultMeasureValue != 0.0,]
# retrieve standard
standard <- standardCalc(UseClass, Indicator, Category, segmentWBID, eval_type)
# build scatterplot
if(nrow(dataset) == 0){
sp <- ggplot(dataset) + geom_blank()
sp <- sp + ggtitle("No data available")
sp <- sp + theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
sp
}else{
sp <- ggplot(dataset, aes(x = ActivityStartDate, y = ResultMeasureValue))
if(nrow(dataset) > 25) {
sp <- sp + geom_smooth(se=FALSE)
sp <- sp + geom_dl(aes(label = "Trendline**"), color = "blue",method = "smart.grid")
}
sp <- sp + geom_point(size = 2)
sp <- sp + geom_hline(yintercept = standard, linetype = "dashed",size = 1.5, color = "red")
sp <- sp + geom_text(aes(x = StartDate, y=standard, hjust = -0.25, vjust=1.5,label = "Standard", size = 12,color = "red", face = "bold"))
sp <- sp + ggtitle("Measured concentration \nthrough time")
sp <- sp + labs(x = "Date", y = Units)
sp <- sp + theme_bw() + theme(
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text = element_text(size = 12, face = "bold"),
panel.border = element_rect(color = "black", fill=NA, size=.8),
plot.title = element_text(size = 14, face = "bold"),
legend.position = "none"
)
sp
}
return(sp)
}
ui <- fluidPage(
titlePanel("Water Quality Explorer"),
leaflet::leafletOutput(
outputId = "mymap",
height = 600
),
textOutput("temp"),
tags$head(tags$style("#temp{color: black;
font-size: 18px;
font-style: bold;
}")
),
# format sidebar with inputs and output table
fluidRow(
column(4,
h4("Select a segment, date range, use class, category, and parameter to begin.
Select a segment by clicking on the map above and select other parameters using the drop down menus.
Calculations will be made for the desired parameters.")
),
column(4,
dateRangeInput(inputId = "daterange",
label = "Choose a date range",
start = "2008-01-01",
end = "2018-12-31",
min = "2008-01-01",
max = "2018-12-31",
format = "mm-dd-yyyy"),
# define use class
selectInput(inputId = "useclass",
label = "Use Class",
useclasses)
),
column(4,
uiOutput("category"),
uiOutput("indicator"))
),
fluidRow(
column(4,
formattableOutput("table"),
h6("* Hardness-based standards are dynamically calculated using temperature and hardness data collected during the specified time period.
Calculated standard on this web app may differ from the regulatory standard.\n**Blue trendline in scatterplot is fitted with a LOESS smooth function.")
),
# format columns
column(4,
plotOutput("boxplot")
),
column(4,
plotOutput("scatterplot")
)
)
)
server <- function(input, output) {
# render leaflet map with shapefile and options for basemaps
factpal <- colorFactor(rainbow(36), seg_shp$AUID)
newpal <- colorFactor(palette = c("orange","yellow","yellow","green"), levels = c("5","3a","3b","1"))
bounds <- bbox(seg_shp)
output$mymap <- renderLeaflet(
leaflet(data = seg_shp, options = leafletOptions(minZoom = 9)) %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "Imagery") %>%
addProviderTiles(providers$Stamen.Terrain, group = "Terrain") %>%
# add polyline layer with individual segments
addPolylines(layerId = ~AUID,label = ~PortionDes, weight = 3, group = "Segments (Selectable)", color = ~factpal(AUID),
highlightOptions = highlightOptions(color = "mediumseagreen",opacity = 1.0,weight = 3,bringToFront = TRUE)) %>%
# add polyline layer with regulatory status codes
addPolylines(label = ~PortionDes, weight = 3, group = "Impairment (View only)", fillOpacity = 1, color = ~newpal(Cat),
highlightOptions = highlightOptions(color = "mediumseagreen",opacity = 1.0,weight = 3,bringToFront = TRUE)) %>%
# set boundaries for viewing
setMaxBounds( lng1 = bounds[1,1] - 1
, lat1 = bounds[2,1] - 1
, lng2 = bounds[1,2] + 1
, lat2 = bounds[2,2] + 1) %>%
# Layers control
addLayersControl(
baseGroups = c("Topo", "Imagery", "Terrain"),
overlayGroups = c("Segments (Selectable)", "Impairment (View only)"),
options = layersControlOptions(collapsed = FALSE)) %>%
addLegend(title = "Regulatory status",
colors = c("orange","yellow","green"),
labels = c("5: (303(d) Impaired)", "3a/b: (Not enough information/M & E)","1: All attaining standards"),
group = "Impairment (View only)") %>%
hideGroup(group = "Impairment (View only)")
)
# selec segment by map shape click, return text
observe({
click = input$mymap_shape_click
seg = input$mymap_shape_click$id
if(is.null(click))
output$temp <- renderText({
"No segment selected. Click a segment to initiate program."})
else
output$temp <- renderText({
paste("Segment:", seg)
})
})
# render interactive useclass, category, and water quality parameter selection
df0 <- eventReactive(input$useclass,{
wqStandards %>% filter(UseClass %in% input$useclass)
})
output$category <- renderUI({
selectInput("category","Choose category",sort(unique(df0()$Category)))
})
df1 <- eventReactive(input$category,{
df0() %>% filter(Category %in% input$category)
})
output$indicator <- renderUI({
selectInput("indicator","Desired water quality parameter",sort(unique(df1()$Indicator)))
})
# render boxplot with interactive data
output$boxplot <- renderPlot({
buildBoxplot(watershedData, input$useclass, input$indicator, input$category, input$mymap_shape_click$id, input$daterange[1], input$daterange[2])
})
# render scatterplot with interactive data
output$scatterplot <- renderPlot({
buildScatterplot(watershedData, input$useclass, input$indicator, input$category, input$mymap_shape_click$id, input$daterange[1], input$daterange[2])
})
# render table with interactive data
output$table <- renderFormattable({
getSummaryStats(watershedData, input$useclass, input$indicator, input$category, input$mymap_shape_click$id, input$daterange[1], input$daterange[2])
})
}
shinyApp(ui = ui, server = server)
wqStandards <- read.csv(file="./Program_Files/2018_Standards_new.csv", header=TRUE, stringsAsFactors=F)
View(wqStandards)
View(wqStandards)
colnames(wqStandards)
watershedData <- read.csv(file="./Data/Combined_14010001_14010005_dataSheet.2019-12-23.csv",header=T,stringsAsFactors=F,strip.white=T) #retrieve the datasheet
setwd("D:/wq_report_card/WQ-ReportCard")
sapply(list.files(pattern="[.]R$", path="./Functions/", full.names=TRUE), source)
monitoringStations <- read.csv(file="./Program_Files/Monitoring_Stations_MCW_2018_30y.csv",
header=TRUE, sep=",",stringsAsFactors=F, strip.white=T)
monitoringStations <- monitoringStations %>% distinct()
remove_stations <- c("","","")
monitoringStations <- monitoringStations[!(monitoringStations$MonitoringLocationID %in% remove_stations),]
wqStandards <- read.csv(file="./Program_Files/2018_Standards_new.csv", header=TRUE, stringsAsFactors=F)
dischargeStations <- read.csv('./Program_Files/discharge_stations_MCW.csv',
colClasses=c(rep("character", 4)), stringsAsFactors=FALSE)
#' Define data query and assessment date ranges. Range should span 5 years to allow for trends
#' assessment and to conform with WQCD listing methodology
StartDate <- ('01-01-1988') # MM-DD-YYYY This is the start date for the entire data set you want.
EndDate <- ('12-31-2018') # MM-DD-YYYY This is the end date for the entire data set you want.
watershedData$ActivityStartDate <- as.Date(watershedData$ActivityStartDate, tryFormats = c("%Y-%m-%d", "%m/%d/%Y")) #format as dates
Monitoring_Station_List <- unique(as.list(watershedData$MonitoringLocationIdentifier))
monitoringStations <- monitoringStations[monitoringStations$MonitoringLocationID %in% Monitoring_Station_List,]
range(watershedData$ActivityStartDate, na.rm=T)
watershedData <- watershedData[!is.na(watershedData$ActivityStartDate),]
segmentIDs <- unique(as.vector(monitoringStations$AUID))
print(paste("Total number of segments: ", length(segmentIDs), sep=''))
segmentIDs
sort(segmentIDs)
segment_list <- sort(unique(segmentIDs)[!(unique(segmentIDs) %in% completed) & !(unique(segmentIDs) %in% exclude)])
completed <- c()
completed <-sub(".csv" ,"" ,list.files(pattern="[.]csv$", path="./Output/", full.names=F))
completed <- c()
segment_list <- sort(unique(segmentIDs)[!(unique(segmentIDs) %in% completed) & !(unique(segmentIDs) %in% exclude)])
exclude <- c()
segment_list <- sort(unique(segmentIDs)[!(unique(segmentIDs) %in% completed) & !(unique(segmentIDs) %in% exclude)])
print("Remaining segments to analyze:")
print(segment_list)
doc_path = "Output/WQ_appendix.docx"
wq_doc <- read_docx() %>%
body_add_par(value = "Water Quality Report Card", style = "heading 1") %>%
body_add_toc(level = 3, pos = "after") %>%
body_add_break() %>%
body_add_par(value = "Segment Summaries" , style = "heading 2") %>%
print(target = doc_path)
xl_name = "REPORT_CARD.xlsx"
stations <- select(monitoringStations, c(AUID, PortionDes))
stations <- distinct(stations)
write.xlsx(stations, file = xl_name, sheetName = "Segments", append = TRUE, showNA = FALSE)
for (segment in segment_list){
stationIDs = unique(as.vector(monitoringStations$MonitoringLocationID[
tolower(monitoringStations$SegmentID) == tolower(segment)]))
cat("\n 305(b) Segment ID: ", segment)
cat("\n   Monitoring stations: ",stationIDs)
cat("\n")
#for troubleshooting if a certain segment and/or parameter is causing issues
#if(segment=="COUCEA02_A"){debug(some_function)}
summarizeSegments(segment, stationIDs)
}
View(wqStandards)
completed <-sub(".csv" ,"" ,list.files(pattern="[.]csv$", path="./Output/", full.names=F))
segment_list <- sort(unique(segmentIDs)[!(unique(segmentIDs) %in% completed) & !(unique(segmentIDs) %in% exclude)])
print("Remaining segments to analyze:")
print(segment_list)
buildAssessTable(segment_list)
exclude <- c("COLCLC15a_A","COLCLC15b_A","COLCLC15d_A","COLCLC16_A" , "COLCLC17a_A", "COLCLC17b_A")
segment_list <- sort(unique(segmentIDs)[!(unique(segmentIDs) %in% completed) & !(unique(segmentIDs) %in% exclude)])
buildAssessTable(segment_list)
print(segment_list)
segmentIDs <- unique(as.vector(monitoringStations$AUID))
exclude <- c("COLCLC15a_A","COLCLC15b_A","COLCLC15d_A","COLCLC16_A" , "COLCLC17a_A", "COLCLC17b_A")
print(segment_list)
completed <- c()
segment_list <- sort(unique(segmentIDs)[!(unique(segmentIDs) %in% completed) & !(unique(segmentIDs) %in% exclude)])
print(segment_list)
buildAssessTable(segment_list)
monitoringStations <- read.csv(file="./Program_Files/monitoringSites_ERW_4_7_20.csv",
header=TRUE, sep=",",stringsAsFactors=F, strip.white=T)
monitoringStations <- monitoringStations %>% distinct()
segmentIDs <- unique(as.vector(monitoringStations$AUID))
print(paste("Total number of segments: ", length(segmentIDs), sep=''))
View(monitoringStations)
monitoringStations <- read.csv(file="./Program_Files/monitoringSites_ERW_4_7_20.csv",
header=TRUE, sep=",",stringsAsFactors=F, strip.white=T)
monitoringStations <- monitoringStations %>% distinct()
segmentIDs <- unique(as.vector(monitoringStations$AUID))
print(paste("Total number of segments: ", length(segmentIDs), sep=''))
segmentIDs
sort(segmentIDs)
